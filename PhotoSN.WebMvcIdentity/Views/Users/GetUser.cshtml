@model UserModel
@{
    ViewData["Title"] = Model.Nickname;
    var currentUser = await UserManager.GetUserAsync(User);
    var userBarTemplate = await Html.PartialAsync("_UserBarTemplate");
    var postTemplate = await Html.PartialAsync("_PostTemplate");
}

@section Styles{
    <style>
        .AvatarImage {
            height: 300px;
            width: 300px;
            border-radius: 300px;
        }

        .MainNickname {
            font-size: 30px;
        }

        .PostImage {
            max-height: 200px;
            max-width: 600px;
            margin: 1px;
            border-radius: 20px;
        }
    </style>
}

@section Scripts{
    <script type="text/template" id="userBarTemplate">
        @userBarTemplate
    </script>

    <script type="text/template" id="postTemplate">
        @postTemplate
    </script>

    <script>
        var hasMorePosts = true;
        var userBarTemplate = Hogan.compile($("#userBarTemplate").html());
        var postTemplate = Hogan.compile($("#postTemplate").html());

        function FollowToUser() {
            $("#FollowerButton").attr("disabled", "disabled");
            $.ajax({
                url: "@Url.Action("FollowToUser")/@Model.UserId",
                type: "POST",
                success: function () {
                    $("#FollowerButton").attr("class", "btn btn-danger");
                    $("#FollowerButton").text("Unfollow");
                    $("#FollowerButton").attr("onclick", "UnfollowFromUser()");
                    $("#FollowersAmount").text(parseInt($("#FollowersAmount").text()) + 1);
                },
                error: function (xhr) {
                    alert(xhr.responseText);
                },
                complete: function () {
                    $("#FollowerButton").removeAttr("disabled");
                }
            });
        }

        function UnfollowFromUser() {
            $("#FollowerButton").attr("disabled", "disabled");
            $.ajax({
                url: "@Url.Action("UnfollowFromUser")/@Model.UserId",
                type: "DELETE",
                success: function () {
                    $("#FollowerButton").attr("class", "btn btn-primary");
                    $("#FollowerButton").text("Follow");
                    $("#FollowerButton").attr("onclick", "FollowToUser()");
                    $("#FollowersAmount").text(parseInt($("#FollowersAmount").text()) - 1);
                },
                error: function (xhr) {
                    alert(xhr.responseText);
                },
                complete: function () {
                    $("#FollowerButton").removeAttr("disabled");
                }
            });
        }

        function ShowFollowers() {
            $("#ShowFollowersButton").attr("disabled", "disabled");
            $("#ShowFollowingsButton").attr("disabled", "disabled");
            $.ajax({
                url: "@Url.Action("GetFollowers")/@Model.UserId",
                type: "GET",
                success: function (result) {
                    $(".modal-title").html("@Model.Nickname's followers");
                    $(".modal-body").html(userBarTemplate.render({ "UserBars": result }));
                    $("#UserBarsModal").modal("show");
                },
                error: function (xhr) {
                    alert(xhr.responseText);
                },
                complete: function () {
                    $("#ShowFollowersButton").removeAttr("disabled");
                    $("#ShowFollowingsButton").removeAttr("disabled");
                }
            });
        }

        function ShowFollowings() {
            $("#ShowFollowersButton").attr("disabled", "disabled");
            $("#ShowFollowingsButton").attr("disabled", "disabled");
            $.ajax({
                url: "@Url.Action("GetFollowings")/@Model.UserId",
                type: "GET",
                success: function (result) {
                    $(".modal-title").html("@Model.Nickname's followings");
                    $(".modal-body").html(userBarTemplate.render({"UserBars": result}));
                    $("#UserBarsModal").modal("show");
                },
                error: function (xhr) {
                    alert(xhr.responseText);
                },
                complete: function () {
                    $("#ShowFollowersButton").removeAttr("disabled");
                    $("#ShowFollowingsButton").removeAttr("disabled");
                }
            });
        }

        function GetMorePosts() {
            var lastId = $(".Post").last().data("postid");
            var urlString = "@Url.Action("GetPostsByUserId", "Posts")/@Model.UserId";
            if (lastId != null) {
                urlString += "?postId=" + lastId;
            }
            $.get(urlString)
                .done(function (res) {
                    if (Array.isArray(res)) {
                        if (res.length == 0) {
                            hasMorePosts = false;
                        }
                        else {
                            $("#Posts").append(postTemplate.render({ Posts: res }));
                        }
                    }
            });
        }

        GetMorePosts();

        $(window).on("scroll", function() {
            var scrollTop = $(window).scrollTop();
            var documentHeight = $(document).height();
            var windowHeight = $(window).height();

            if (documentHeight - scrollTop < windowHeight * 1.5 && hasMorePosts) {
                GetMorePosts();
	        }
        });

        function LikeOrDislikePost(elem) {
            var postId = elem.getAttribute("data-postid");
            var likeButton = $("button[data-postid=" + postId + "]");
            var likeAmountSpan = $("#LikeAmount" + postId);

            likeButton.attr("disabled", "disabled");
            $.ajax({
                url: "@Url.Action("LikeOrDislikePost", "Posts")/" + postId,
                type: "POST",
                success: function (res) {
                    if (res) {
                        if (likeButton.text() == "Like") {
                            likeAmountSpan.text(parseInt(likeAmountSpan.text()) + 1);
                        }
                        likeButton.text("Dislike");
                        likeButton.attr("class", "btn btn-danger");
                    }
                    else {
                        if (likeButton.text() == "Dislike") {
                            likeAmountSpan.text(parseInt(likeAmountSpan.text()) - 1);
                        }
                        likeButton.text("Like");
                        likeButton.attr("class", "btn btn-primary");
                    }
                },
                error: function (xhr) {
                    alert(xhr.responseText);
                },
                complete: function () {
                    likeButton.removeAttr("disabled");
                }
            });
        };
    </script>
}

<div>
    <div class="col-md-12 row">
        <img class="AvatarImage"
             src="@Url.Action("GetImage", "Images", new { id=Model.AvatarImageId })"
             onerror="this.onerror=null;this.src='/defaultmedia/defaultavatar.jpeg';" />
        <div style="margin-left: 10px; max-width: 50%;">
            <div>
                <div class="MainNickname">@Html.DisplayFor(model => model.Nickname)</div>
                <div style="white-space: pre-line; margin-bottom: 10px;">@Html.DisplayFor(model => model.Bio)</div>
                <div style="margin-right: 30px;">
                    <button style="all: unset; cursor: pointer;" id="ShowFollowersButton" onclick="ShowFollowers()">
                        @Html.DisplayNameFor(model => model.Followers) <span id="FollowersAmount" style="font-weight: bold;">@Html.DisplayFor(model => model.Followers.Count)</span>
                    </button>
                </div>
                <div>
                    <button style="all: unset; cursor: pointer;" id="ShowFollowingsButton" onclick="ShowFollowings()">
                        @Html.DisplayNameFor(model => model.Following) <span style="font-weight: bold;">@Html.DisplayFor(model => model.Following.Count)</span>
                    </button>
                </div>
                @if (User.Identity.IsAuthenticated && currentUser.Email != Model.Email)
                {
                    if (Model.Followers.FirstOrDefault(s => s.UserId == currentUser.Id) != null)
                    {
                        <button id="FollowerButton" class="btn btn-danger" onclick="UnfollowFromUser()">Unfollow</button>
                    }
                    else
                    {
                        <button id="FollowerButton" class="btn btn-primary" onclick="FollowToUser()">Follow</button>
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-md-12" id="Posts">

    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="UserBarsModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>